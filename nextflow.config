/*
*----------------------------------------------------------
* Configuration file for testing 
* and verifying the pipeline runs with minimal dataset
*-----------------------------------------------------------
* defines all required input files to test the funtionality of the pipeline
*/

/*
* use the following script to run the pipeline 
	* for 'mbbu/AAT-project', run the pipeline as described

		* nextflow run mbbu/AAT-project -dev2 -C test.config -profile <docker/singularity>

	* for 'mbbu/Assessing-Variant-Calling-Pipelines', run the pipeline with the command;
	
		* nextflow run mbbu/Assessing-Variant-Calling-Pipelines -C test.config -profile <docker/singularity>
	
*/

// Set parameters
  params {
	  outdir = './Results'
   	  reads = 'dev2/raw_data/SRR2589044*{1,2}*.gz'
   	  adapter = null
  	  genome = 'dev2/ref_genome/ecoli_rel606.fasta'
   	  variants = '/dev2/vcf/SRR2584863_final_variants.vcf'
   	  tracedir = "${outdir}/TraceDir"
	  snpeffdb = 'Escherichia_coli_gca_001284745'
	  report = '${outdir}/Pipeline_report'   
	 }

// define input parameters for the workflow
	outdir = params.outdir
	genome = params.genome
	reads = params.reads
	variants = params.variants
	adapater = params.adapter
	tracedir = params.tracedir
	snpeffdb = params.snpeffdb
	report = params.report

 // Define required resources 
	  max_cpus = 2
  	  max_memory = 8.GB
	  max_time = 48.h

// define process profiles 

	manifest {
  name = "GATK_Variant_Calling" 
  authors = "Hebrew, Rose, Allan, Joyce"
  homePage = 'https://github.com/mbbu/AAT-project'
  description = "Variant calling pipeline using GATK"
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'

		}
// include additional pipeline parameters
trace {
        enabled = True
        file = "${params.tracedir}/trace_report.txt"
        }
timeline {
        enabled = True
        file = "${params.report}/pipeline_report.html"
        overwrite = True
        }
dag {
        enabled = True
        file = "${params.report}/dag_graph.png"
        }

// pipeline profiles 
	profiles {
        standard {
                process.container =  "hebrewsimeon/condatest:latest"
                }
        docker {
                process.container =  "hebrewsimeon/condatest:latest"
                docker.enabled = True
                }
        singularity {
                process.container =  "hebrewsimeon/condatest:latest"
                singularity.enabled = True
                }
        batch {
                process.container =  "hebrewsimeon/condatest:latest"
                process.memory = 10.GB
                process.queue = "sbatch"
                process.executor = "slurm"
                process.cpu = 8
                }
        }
